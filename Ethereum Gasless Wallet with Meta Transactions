// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract GaslessWallet {
    address public owner;
    address public relayer;

    event TransactionExecuted(address indexed to, uint256 value);

    constructor(address _relayer) {
        owner = msg.sender;
        relayer = _relayer;
    }

    function executeTransaction(address to, uint256 value, bytes memory signature) public {
        require(msg.sender == relayer, "Only relayer can execute");
        require(verifySignature(owner, signature), "Invalid signature");

        (bool success, ) = to.call{value: value}("");
        require(success, "Transaction failed");

        emit TransactionExecuted(to, value);
    }

    function verifySignature(address account, bytes memory signature) internal pure returns (bool) {
        // Placeholder for signature verification logic
        return true;
    }

    receive() external payable {}
}
